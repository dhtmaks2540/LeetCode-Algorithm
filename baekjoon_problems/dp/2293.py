"""
n과 k가 주어질 때, 가치의 합이 k가 되는 경우의 수

DP를 사용하여 문제풀이

해당 문제는 우선 최적 부분 구조에 해당한다. 최적 부분 구조는 문제의 최적 해결 방법이 부분 문제에 대한
최적 해결 방법으로 구성되는 경우를 뜻한다. 해당 문제에서 만약 동전 1,2,5가 있고 5원을 만드는 답을 구하라고 할 경우
5원을 만드는 경우는 0원 + 5원 또는 1원 + 4원 또는 2원 + 3원의 값 중 최댓값이라는 부분 문제가 존재하기에
최적 부분 구조라고 할 수 있다. 거기에 또 4원의 최적의 답은 0원 + 4원, 1원 + 3원과 같이 중복 되는 문제가
발생하기에 DP 문제라고 할 수 있다.

동전 문제는 min과 max를 풀이하는 방법이 다르므로 잘 구분하도록 하자!!
"""

# 동전의 개수, 목표 합
n, k = map(int, input().split())
# 동전
array = []

for _ in range(n):
    array.append(int(input()))

# dp 테이블
dp = [0] * (k + 1)

dp[0] = 1

# 보텀업 다이나믹 프로그래밍 진행
for i in range(n): # 동전 iterate
    for j in range(array[i], k + 1): # 화폐 iterate
        if j - array[i] >= 0:
            # 점화식
            # 현재 화폐를 만드는 최대의 경우의 수 = 
            # 현재 화폐값 - 화폐의 가치를 뺀 값의 경우의 수를 누적으로 더한다. 
            dp[j] += dp[j - array[i]]

print(dp[k])