"""
2 * n 크기의 직사각형을 1 * 2, 2 * 1 타일로 채우는 방법의 수를 구하는 프로그램을 작성하라.

2 * 3의 직사각형을 타일로 채우는 방법의 수를 확인해보자.
2 * 3을 타일로 채우기 위해서는 2 * 2의 직사각형을 타일로 채우는 방법에 
남은 부분을 2 * 1 타일로 채우는 것과
2 * 1의 직사각형을 타일로 채우는 방법에 남은 부분을 1 * 2 타일로 채우는 것의 합이 된다.
2 * 1의 직사각형을 2 * 1의 타일로 채우는 방법을 확인하지 않는 이유는 2 * 2의 직사각형을 타일로 채우는 방법에
이미 포함되어 있기 때문이다.

따라서 n값에서의 점화식은 dp[n] = dp[n - 1] + dp[n - 2]에 해당한다. 이를 보텀업 방식으로
순회하면서 값을 채우고 출력하면 된다.

해당 문제를 다이나믹 프로그래밍으로 푼 이유는 위에서 보았듯이 값이 중복되어서 나오기 때문이다.
예를 들어 2 * 5를 채우는 방법은 2 * 4를 채우는 방법과 2 * 3을 채우는 방법이 사용되고
2 * 4를 채우는 방법은 2 * 3을 채우는 방법과 2 * 2를 채우는 방법이 사용된다. 이처럼
중복되는 값이 나오기에 메모리에 이를 저장하고 나중에 사용하는 다이나믹 프로그래밍으로 접근할 수 
있는 것이다.
"""

n = int(input())
# 다이나믹 프로그래밍을 위한 1차원 테이블
dp = [0] * (1001)
# 2 * 1을 채우는 방법은 1가지
dp[1] = 1
# 2 * 2를 채우는 방법은 2가지
dp[2] = 2

# 보텀업으로 접근
for i in range(3, n + 1):
    # 점화식에 해당
    dp[i] = dp[i - 1] + dp[i - 2] 

print(dp[n] % 10007)