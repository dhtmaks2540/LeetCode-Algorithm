"""
동전을 최소로 사용해 동전의 가치가 k원이 되도록

다이나믹 프로그래밍으로 문제 풀이

현재 문제는 동전 1과 같이 최적 부분 구조에 해당한다.
만약 동전이 1,2,3,4원이 주어진 경우 5원을 최소의 동전으로 만드는 방법은
1원 + 4원, 2원 + 3원과 같은 부분 문제로 이루어져 있기에 최적 부분 구조 문제에 해당한다.

거기에 또 4원을 만드는 방법은 1원 + 3원, 2원 + 2원과 같이 중복되는 값이 계속해서 나오기에
다이나믹 프로그래밍을 통해 문제를 풀이할 수 있다.

문제의 점화식은 현재 금액 dp[i]는 현재 금액에서 현재 코인의 값을 뺀 값에 현재 코인을 더한다는
개념의 dp[i - coin] + 1과 현재 금액의 dp값 dp[i] 중 최솟값을 가지는 것에 해당한다.
즉, dp[i] = min(dp[i - coin] + 1, dp[i])의 점화식이 도출되고 이를 이용해 문제를 풀이하면 된다.
"""

import sys

input = sys.stdin.readline

# 동전의 개수, 가치의 합
n, k = map(int, input().split())
# 동전 가치 리스트
coins = []

for _ in range(n):
    coins.append(int(input()))

# 값을 저장하기 위한 DP 테이블
dp = [10001] * (k + 1)
# 0원을 만드는 방법은 0
dp[0] = 0

# 동전을 iterate
for coin in coins:
    # 화폐를 iterate
    for i in range(coin, k + 1):
        # 점화식에 해당
        # 현재 금액을 만드는 최소의 방법은
        # 현재 금액에서 현재 coin을 뺀 금액에 현재 코인을 더한 값 또는
        # 현재 금액 그대로 중 최솟값에 해당
        dp[i] = min(dp[i - coin] + 1, dp[i])

if dp[k] == 10001:
    print(-1)
else:
    print(dp[k])