# Definition for a binary tree node.
class TreeNode:
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution:
    # DFS로 접근
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # exit condition
        if not root: return None

        # LCA를 찾으려는 노드와 같다면 현재 노드 반환
        if root.val == p.val or root.val == q.val: return root

        # left와 right 재귀 호출
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)

        # 자식 노드가 모두 있다면, 현재의 노드 반환
        if left and right: return root

        return left or right

    # 스택과 딕셔너리를 사용하여 문제 풀이
    def lowestCommonAncestor(self, root, p, q):
        """
        :type root: TreeNode
        :type p: TreeNode
        :type q: TreeNode
        :rtype: TreeNode
        """

        # Stack for tree traversal
        # 트리 순회를 위한 Stack
        stack = [root]

        # Dictionary for parent pointers
        # parent pointers(부모 노드를 가리키는 포인터)를 위한 딕셔너리
        parent = {root: None}

        # Iterate until we find both the nodes p and q
        # p와 q 모두를 찾기 전까지 반복
        while p not in parent or q not in parent:
            node = stack.pop()

            # While traversing the tree, keep saving the parent pointers.
            # 트리를 순회하는 동안에, parent pointer를 계속해서 저장
            if node.left:
                # node.left의 부모는 node(현재 노드)
                parent[node.left] = node
                stack.append(node.left)
            if node.right:
                # node.right의 부모는 node(현재 노드)
                parent[node.right] = node
                stack.append(node.right)

        # Ancestors set() for node p.
        # p를 위한 조상 집합
        ancestors = set()

        # Process all ancestors for node p using parent pointers.
        # parent pointer를 사용하여 노드 p의 모든 조상을 처리
        while p:
            ancestors.add(p)
            p = parent[p]

        # The first ancestor of q which appears in
        # p's ancestor set() is their lowest common ancestor.
        # p의 조상 집합 안에서 나타난 q의 첫 번째 조상이 그들의 lca이다.
        while q not in ancestors:
            q = parent[q]
        return q

    """
    https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/discuss/64963/3-lines-with-O(1)-space-1-Liners-Alternatives
    """

    """
    https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree/discuss/65074/Python-Iterative-Solution
    """

    # Iterative
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        while root:
            p_diff = root.val - p.val
            q_diff = root.val - q.val

            if p_diff > 0 and q_diff > 0:
                # both p and q are one the left
                # p와 q가 모두 왼쪽에 있다면
                root = root.left
            else:
                if p_diff < 0 and q_diff < 0:
                    # both p and q are one the right
                    # p와 q가 모두 오른쪽에 있다면
                    root = root.right
                else:
                    # p and q are distributed to 2 of left, right, or root. root is the lca
                    # 이진 탐색 트리이기에 p와 q가 왼쪽과 오른쪽으로 갈린다면 부모 노드는 현재 노드에 해당
                    return root

        return root

    # Recursive
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
        # 현재 노드보다 p와 q가 모두 왼쪽에 있다면
        if root.val > p.val and root.val > q.val:
            return self.lowestCommonAncestor(root.left, p, q)
        # 현재 노드보다 p와 q가 모두 오른쪽에 있다면
        elif root.val < p.val and root.val < q.val:
            return self.lowestCommonAncestor(root.right, p, q)
        # 두 노드의 위치가 오른쪽 왼쪽으로 갈린다면 현재 노드가 부모 노드에 해당
        else:
            return root